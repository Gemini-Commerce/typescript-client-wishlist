/* tslint:disable */
/* eslint-disable */
/**
 * wishlist/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ListWishlistsRequestFilter
 */
export interface ListWishlistsRequestFilter {
    /**
     * If the customer GRN is set on JWT, it will be used as default. Otherwise, it will be used the customer_grn field.
     * @type {string}
     * @memberof ListWishlistsRequestFilter
     */
    'customerGrn'?: string;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    'typeUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @interface WishlistAddItemToWishlistRequest
 */
export interface WishlistAddItemToWishlistRequest {
    /**
     * 
     * @type {string}
     * @memberof WishlistAddItemToWishlistRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistAddItemToWishlistRequest
     */
    'wishlistId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistAddItemToWishlistRequest
     */
    'itemGrn'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistAddItemToWishlistRequest
     */
    'preferredQuantity'?: string;
    /**
     * 
     * @type {WishlistLocalizedText}
     * @memberof WishlistAddItemToWishlistRequest
     */
    'description'?: WishlistLocalizedText;
    /**
     * 
     * @type {string}
     * @memberof WishlistAddItemToWishlistRequest
     */
    'customerGrn'?: string;
}
/**
 * 
 * @export
 * @interface WishlistAreItemsInWishlistsRequest
 */
export interface WishlistAreItemsInWishlistsRequest {
    /**
     * 
     * @type {string}
     * @memberof WishlistAreItemsInWishlistsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistAreItemsInWishlistsRequest
     */
    'wishlistId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistAreItemsInWishlistsRequest
     */
    'customerGrn'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WishlistAreItemsInWishlistsRequest
     */
    'itemGrns'?: Array<string>;
}
/**
 * 
 * @export
 * @interface WishlistAreItemsInWishlistsResponse
 */
export interface WishlistAreItemsInWishlistsResponse {
    /**
     * 
     * @type {{ [key: string]: WishlistAreItemsInWishlistsResponsePayload; }}
     * @memberof WishlistAreItemsInWishlistsResponse
     */
    'itemGrnMap'?: { [key: string]: WishlistAreItemsInWishlistsResponsePayload; };
}
/**
 * 
 * @export
 * @interface WishlistAreItemsInWishlistsResponsePayload
 */
export interface WishlistAreItemsInWishlistsResponsePayload {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof WishlistAreItemsInWishlistsResponsePayload
     */
    'wishlistGrnToWishlistItemGrnMap'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface WishlistBulkCreateSharingRequest
 */
export interface WishlistBulkCreateSharingRequest {
    /**
     * 
     * @type {string}
     * @memberof WishlistBulkCreateSharingRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<WishlistSharingRequest>}
     * @memberof WishlistBulkCreateSharingRequest
     */
    'sharingRequests'?: Array<WishlistSharingRequest>;
}
/**
 * 
 * @export
 * @interface WishlistBulkCreateSharingResponse
 */
export interface WishlistBulkCreateSharingResponse {
    /**
     * 
     * @type {Array<WishlistSharingResponse>}
     * @memberof WishlistBulkCreateSharingResponse
     */
    'sharingResponses'?: Array<WishlistSharingResponse>;
}
/**
 * 
 * @export
 * @interface WishlistBulkRemoveItemsFromWishlistsRequest
 */
export interface WishlistBulkRemoveItemsFromWishlistsRequest {
    /**
     * 
     * @type {string}
     * @memberof WishlistBulkRemoveItemsFromWishlistsRequest
     */
    'tenantId'?: string;
    /**
     * Item GRNs to remove from wishlists. Max 500 items per request.
     * @type {Array<string>}
     * @memberof WishlistBulkRemoveItemsFromWishlistsRequest
     */
    'itemGrns'?: Array<string>;
    /**
     * Wishlist IDs to remove items from. Max 500 wishlists per request. If not provided, items will be removed from all wishlists.
     * @type {Array<string>}
     * @memberof WishlistBulkRemoveItemsFromWishlistsRequest
     */
    'wishlistIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface WishlistBulkRevokeSharingRequest
 */
export interface WishlistBulkRevokeSharingRequest {
    /**
     * 
     * @type {string}
     * @memberof WishlistBulkRevokeSharingRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WishlistBulkRevokeSharingRequest
     */
    'sharingIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface WishlistCreateWishlistRequest
 */
export interface WishlistCreateWishlistRequest {
    /**
     * 
     * @type {string}
     * @memberof WishlistCreateWishlistRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {WishlistPrivacy}
     * @memberof WishlistCreateWishlistRequest
     */
    'privacy'?: WishlistPrivacy;
    /**
     * 
     * @type {WishlistLocalizedText}
     * @memberof WishlistCreateWishlistRequest
     */
    'label'?: WishlistLocalizedText;
    /**
     * 
     * @type {WishlistLocalizedText}
     * @memberof WishlistCreateWishlistRequest
     */
    'description'?: WishlistLocalizedText;
    /**
     * If the customer GRN is set on JWT, it will be used as default. Otherwise, it will be used the customer_grn field.
     * @type {string}
     * @memberof WishlistCreateWishlistRequest
     */
    'customerGrn'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WishlistCreateWishlistRequest
     */
    'isDefault'?: boolean;
}


/**
 * 
 * @export
 * @interface WishlistDeleteWishlistRequest
 */
export interface WishlistDeleteWishlistRequest {
    /**
     * 
     * @type {string}
     * @memberof WishlistDeleteWishlistRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistDeleteWishlistRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface WishlistGetItemFromWishlistRequest
 */
export interface WishlistGetItemFromWishlistRequest {
    /**
     * 
     * @type {string}
     * @memberof WishlistGetItemFromWishlistRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistGetItemFromWishlistRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface WishlistGetWishlistByIdRequest
 */
export interface WishlistGetWishlistByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof WishlistGetWishlistByIdRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistGetWishlistByIdRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface WishlistGetWishlistBySharedCodeRequest
 */
export interface WishlistGetWishlistBySharedCodeRequest {
    /**
     * 
     * @type {string}
     * @memberof WishlistGetWishlistBySharedCodeRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistGetWishlistBySharedCodeRequest
     */
    'sharedCode'?: string;
    /**
     * If the customer GRN is set on JWT, it will be used as default. Otherwise, it will be used the customer_grn field.
     * @type {string}
     * @memberof WishlistGetWishlistBySharedCodeRequest
     */
    'customerGrn'?: string;
}
/**
 * 
 * @export
 * @interface WishlistListWishlistItemsRequest
 */
export interface WishlistListWishlistItemsRequest {
    /**
     * 
     * @type {string}
     * @memberof WishlistListWishlistItemsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistListWishlistItemsRequest
     */
    'wishlistId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistListWishlistItemsRequest
     */
    'customerGrn'?: string;
    /**
     * 
     * @type {number}
     * @memberof WishlistListWishlistItemsRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof WishlistListWishlistItemsRequest
     */
    'pageToken'?: string;
}
/**
 * 
 * @export
 * @interface WishlistListWishlistItemsResponse
 */
export interface WishlistListWishlistItemsResponse {
    /**
     * 
     * @type {Array<WishlistWishlistItemResponse>}
     * @memberof WishlistListWishlistItemsResponse
     */
    'wishlistItems'?: Array<WishlistWishlistItemResponse>;
    /**
     * 
     * @type {string}
     * @memberof WishlistListWishlistItemsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface WishlistListWishlistsRequest
 */
export interface WishlistListWishlistsRequest {
    /**
     * 
     * @type {string}
     * @memberof WishlistListWishlistsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {number}
     * @memberof WishlistListWishlistsRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof WishlistListWishlistsRequest
     */
    'pageToken'?: string;
    /**
     * 
     * @type {ListWishlistsRequestFilter}
     * @memberof WishlistListWishlistsRequest
     */
    'filter'?: ListWishlistsRequestFilter;
    /**
     * 
     * @type {Array<string>}
     * @memberof WishlistListWishlistsRequest
     */
    'filterMask'?: Array<string>;
}
/**
 * 
 * @export
 * @interface WishlistListWishlistsResponse
 */
export interface WishlistListWishlistsResponse {
    /**
     * 
     * @type {Array<WishlistWishlistResponse>}
     * @memberof WishlistListWishlistsResponse
     */
    'wishlist'?: Array<WishlistWishlistResponse>;
    /**
     * 
     * @type {string}
     * @memberof WishlistListWishlistsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface WishlistLocalizedText
 */
export interface WishlistLocalizedText {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof WishlistLocalizedText
     */
    'value'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface WishlistMergeWishlistsRequest
 */
export interface WishlistMergeWishlistsRequest {
    /**
     * 
     * @type {string}
     * @memberof WishlistMergeWishlistsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistMergeWishlistsRequest
     */
    'startingWishlistId'?: string;
    /**
     * If the customer GRN is set on JWT, it will be used as default. Otherwise, it will be used the customer_grn field.
     * @type {string}
     * @memberof WishlistMergeWishlistsRequest
     */
    'customerGrn'?: string;
    /**
     * The wishlist to merge into the starting wishlist.
     * @type {string}
     * @memberof WishlistMergeWishlistsRequest
     */
    'targetWishlistId'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WishlistPermission = {
    UnknownPermission: 'UNKNOWN_PERMISSION',
    ViewPermission: 'VIEW_PERMISSION',
    EditPermission: 'EDIT_PERMISSION'
} as const;

export type WishlistPermission = typeof WishlistPermission[keyof typeof WishlistPermission];


/**
 * 
 * @export
 * @enum {string}
 */

export const WishlistPrivacy = {
    Unknown: 'PRIVACY_UNKNOWN',
    Public: 'PRIVACY_PUBLIC',
    Private: 'PRIVACY_PRIVATE',
    Shared: 'PRIVACY_SHARED'
} as const;

export type WishlistPrivacy = typeof WishlistPrivacy[keyof typeof WishlistPrivacy];


/**
 * 
 * @export
 * @interface WishlistRemoveItemFromWishlistRequest
 */
export interface WishlistRemoveItemFromWishlistRequest {
    /**
     * 
     * @type {string}
     * @memberof WishlistRemoveItemFromWishlistRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistRemoveItemFromWishlistRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface WishlistSharingRequest
 */
export interface WishlistSharingRequest {
    /**
     * 
     * @type {string}
     * @memberof WishlistSharingRequest
     */
    'wishlistId'?: string;
    /**
     * 
     * @type {WishlistPermission}
     * @memberof WishlistSharingRequest
     */
    'permission'?: WishlistPermission;
    /**
     * 
     * @type {string}
     * @memberof WishlistSharingRequest
     */
    'customerGrn'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistSharingRequest
     */
    'customerAggregationId'?: string;
}


/**
 * 
 * @export
 * @interface WishlistSharingResponse
 */
export interface WishlistSharingResponse {
    /**
     * 
     * @type {string}
     * @memberof WishlistSharingResponse
     */
    'sharingId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistSharingResponse
     */
    'sharingGrn'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistSharingResponse
     */
    'wishlistId'?: string;
    /**
     * 
     * @type {WishlistPermission}
     * @memberof WishlistSharingResponse
     */
    'permission'?: WishlistPermission;
    /**
     * 
     * @type {string}
     * @memberof WishlistSharingResponse
     */
    'customerGrn'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistSharingResponse
     */
    'customerAggregationId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistSharingResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistSharingResponse
     */
    'updatedAt'?: string;
}


/**
 * 
 * @export
 * @interface WishlistUpdateItemInWishlistRequest
 */
export interface WishlistUpdateItemInWishlistRequest {
    /**
     * 
     * @type {string}
     * @memberof WishlistUpdateItemInWishlistRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistUpdateItemInWishlistRequest
     */
    'id'?: string;
    /**
     * 
     * @type {WishlistUpdateItemInWishlistRequestPayload}
     * @memberof WishlistUpdateItemInWishlistRequest
     */
    'payload'?: WishlistUpdateItemInWishlistRequestPayload;
    /**
     * 
     * @type {Array<string>}
     * @memberof WishlistUpdateItemInWishlistRequest
     */
    'payloadMask'?: Array<string>;
}
/**
 * 
 * @export
 * @interface WishlistUpdateItemInWishlistRequestPayload
 */
export interface WishlistUpdateItemInWishlistRequestPayload {
    /**
     * 
     * @type {string}
     * @memberof WishlistUpdateItemInWishlistRequestPayload
     */
    'preferredQuantity'?: string;
    /**
     * 
     * @type {WishlistLocalizedText}
     * @memberof WishlistUpdateItemInWishlistRequestPayload
     */
    'description'?: WishlistLocalizedText;
    /**
     * 
     * @type {string}
     * @memberof WishlistUpdateItemInWishlistRequestPayload
     */
    'customerGrn'?: string;
}
/**
 * 
 * @export
 * @interface WishlistUpdateWishlistRequest
 */
export interface WishlistUpdateWishlistRequest {
    /**
     * 
     * @type {string}
     * @memberof WishlistUpdateWishlistRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistUpdateWishlistRequest
     */
    'id'?: string;
    /**
     * 
     * @type {WishlistUpdateWishlistRequestPayload}
     * @memberof WishlistUpdateWishlistRequest
     */
    'payload'?: WishlistUpdateWishlistRequestPayload;
    /**
     * 
     * @type {Array<string>}
     * @memberof WishlistUpdateWishlistRequest
     */
    'payloadMask'?: Array<string>;
}
/**
 * 
 * @export
 * @interface WishlistUpdateWishlistRequestPayload
 */
export interface WishlistUpdateWishlistRequestPayload {
    /**
     * 
     * @type {WishlistPrivacy}
     * @memberof WishlistUpdateWishlistRequestPayload
     */
    'privacy'?: WishlistPrivacy;
    /**
     * 
     * @type {WishlistLocalizedText}
     * @memberof WishlistUpdateWishlistRequestPayload
     */
    'label'?: WishlistLocalizedText;
    /**
     * 
     * @type {WishlistLocalizedText}
     * @memberof WishlistUpdateWishlistRequestPayload
     */
    'description'?: WishlistLocalizedText;
    /**
     * 
     * @type {boolean}
     * @memberof WishlistUpdateWishlistRequestPayload
     */
    'isDefault'?: boolean;
}


/**
 * 
 * @export
 * @interface WishlistWishlistItemResponse
 */
export interface WishlistWishlistItemResponse {
    /**
     * 
     * @type {string}
     * @memberof WishlistWishlistItemResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistWishlistItemResponse
     */
    'grn'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistWishlistItemResponse
     */
    'wishlistId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistWishlistItemResponse
     */
    'itemGrn'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistWishlistItemResponse
     */
    'preferredQuantity'?: string;
    /**
     * 
     * @type {WishlistLocalizedText}
     * @memberof WishlistWishlistItemResponse
     */
    'description'?: WishlistLocalizedText;
    /**
     * 
     * @type {string}
     * @memberof WishlistWishlistItemResponse
     */
    'addedByCustomerGrn'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistWishlistItemResponse
     */
    'addedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistWishlistItemResponse
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface WishlistWishlistResponse
 */
export interface WishlistWishlistResponse {
    /**
     * 
     * @type {string}
     * @memberof WishlistWishlistResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistWishlistResponse
     */
    'grn'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistWishlistResponse
     */
    'sharedCode'?: string;
    /**
     * 
     * @type {WishlistPrivacy}
     * @memberof WishlistWishlistResponse
     */
    'privacy'?: WishlistPrivacy;
    /**
     * 
     * @type {WishlistLocalizedText}
     * @memberof WishlistWishlistResponse
     */
    'label'?: WishlistLocalizedText;
    /**
     * 
     * @type {WishlistLocalizedText}
     * @memberof WishlistWishlistResponse
     */
    'description'?: WishlistLocalizedText;
    /**
     * 
     * @type {string}
     * @memberof WishlistWishlistResponse
     */
    'customerGrn'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WishlistWishlistResponse
     */
    'isDefault'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WishlistWishlistResponse
     */
    'itemsCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistWishlistResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof WishlistWishlistResponse
     */
    'updatedAt'?: string;
}



/**
 * WishlistApi - axios parameter creator
 * @export
 */
export const WishlistApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {WishlistAddItemToWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistAddItemToWishlist: async (body: WishlistAddItemToWishlistRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('wishlistAddItemToWishlist', 'body', body)
            const localVarPath = `/wishlist.Wishlist/AddItemToWishlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WishlistAreItemsInWishlistsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistAreItemsInWishlists: async (body: WishlistAreItemsInWishlistsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('wishlistAreItemsInWishlists', 'body', body)
            const localVarPath = `/wishlist.Wishlist/AreItemsInWishlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sharing endpoints
         * @param {WishlistBulkCreateSharingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistBulkCreateSharing: async (body: WishlistBulkCreateSharingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('wishlistBulkCreateSharing', 'body', body)
            const localVarPath = `/wishlist.Wishlist/BulkCreateSharing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary BulkRemoveItemsFromWishlists removes items from wishlists.
         * @param {WishlistBulkRemoveItemsFromWishlistsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistBulkRemoveItemsFromWishlists: async (body: WishlistBulkRemoveItemsFromWishlistsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('wishlistBulkRemoveItemsFromWishlists', 'body', body)
            const localVarPath = `/wishlist.Wishlist/BulkRemoveItemsFromWishlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WishlistBulkRevokeSharingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistBulkRevokeSharing: async (body: WishlistBulkRevokeSharingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('wishlistBulkRevokeSharing', 'body', body)
            const localVarPath = `/wishlist.Wishlist/BulkRevokeSharing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WishlistCreateWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistCreateWishlist: async (body: WishlistCreateWishlistRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('wishlistCreateWishlist', 'body', body)
            const localVarPath = `/wishlist.Wishlist/CreateWishlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WishlistDeleteWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistDeleteWishlist: async (body: WishlistDeleteWishlistRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('wishlistDeleteWishlist', 'body', body)
            const localVarPath = `/wishlist.Wishlist/DeleteWishlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WishlistGetItemFromWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistGetItemFromWishlist: async (body: WishlistGetItemFromWishlistRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('wishlistGetItemFromWishlist', 'body', body)
            const localVarPath = `/wishlist.Wishlist/GetItemFromWishlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WishlistGetWishlistByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistGetWishlistById: async (body: WishlistGetWishlistByIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('wishlistGetWishlistById', 'body', body)
            const localVarPath = `/wishlist.Wishlist/GetWishlistById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WishlistGetWishlistBySharedCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistGetWishlistBySharedCode: async (body: WishlistGetWishlistBySharedCodeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('wishlistGetWishlistBySharedCode', 'body', body)
            const localVarPath = `/wishlist.Wishlist/GetWishlistBySharedCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WishlistListWishlistItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistListWishlistItems: async (body: WishlistListWishlistItemsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('wishlistListWishlistItems', 'body', body)
            const localVarPath = `/wishlist.Wishlist/ListWishlistItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WishlistListWishlistsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistListWishlists: async (body: WishlistListWishlistsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('wishlistListWishlists', 'body', body)
            const localVarPath = `/wishlist.Wishlist/ListWishlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WishlistMergeWishlistsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistMergeWishlists: async (body: WishlistMergeWishlistsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('wishlistMergeWishlists', 'body', body)
            const localVarPath = `/wishlist.Wishlist/MergeWishlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WishlistRemoveItemFromWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistRemoveItemFromWishlist: async (body: WishlistRemoveItemFromWishlistRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('wishlistRemoveItemFromWishlist', 'body', body)
            const localVarPath = `/wishlist.Wishlist/RemoveItemFromWishlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WishlistUpdateItemInWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistUpdateItemInWishlist: async (body: WishlistUpdateItemInWishlistRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('wishlistUpdateItemInWishlist', 'body', body)
            const localVarPath = `/wishlist.Wishlist/UpdateItemInWishlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WishlistUpdateWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistUpdateWishlist: async (body: WishlistUpdateWishlistRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('wishlistUpdateWishlist', 'body', body)
            const localVarPath = `/wishlist.Wishlist/UpdateWishlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WishlistApi - functional programming interface
 * @export
 */
export const WishlistApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WishlistApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {WishlistAddItemToWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishlistAddItemToWishlist(body: WishlistAddItemToWishlistRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistWishlistItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishlistAddItemToWishlist(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WishlistApi.wishlistAddItemToWishlist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {WishlistAreItemsInWishlistsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishlistAreItemsInWishlists(body: WishlistAreItemsInWishlistsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistAreItemsInWishlistsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishlistAreItemsInWishlists(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WishlistApi.wishlistAreItemsInWishlists']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Sharing endpoints
         * @param {WishlistBulkCreateSharingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishlistBulkCreateSharing(body: WishlistBulkCreateSharingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistBulkCreateSharingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishlistBulkCreateSharing(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WishlistApi.wishlistBulkCreateSharing']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary BulkRemoveItemsFromWishlists removes items from wishlists.
         * @param {WishlistBulkRemoveItemsFromWishlistsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishlistBulkRemoveItemsFromWishlists(body: WishlistBulkRemoveItemsFromWishlistsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishlistBulkRemoveItemsFromWishlists(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WishlistApi.wishlistBulkRemoveItemsFromWishlists']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {WishlistBulkRevokeSharingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishlistBulkRevokeSharing(body: WishlistBulkRevokeSharingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishlistBulkRevokeSharing(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WishlistApi.wishlistBulkRevokeSharing']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {WishlistCreateWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishlistCreateWishlist(body: WishlistCreateWishlistRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistWishlistResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishlistCreateWishlist(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WishlistApi.wishlistCreateWishlist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {WishlistDeleteWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishlistDeleteWishlist(body: WishlistDeleteWishlistRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishlistDeleteWishlist(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WishlistApi.wishlistDeleteWishlist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {WishlistGetItemFromWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishlistGetItemFromWishlist(body: WishlistGetItemFromWishlistRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistWishlistItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishlistGetItemFromWishlist(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WishlistApi.wishlistGetItemFromWishlist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {WishlistGetWishlistByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishlistGetWishlistById(body: WishlistGetWishlistByIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistWishlistResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishlistGetWishlistById(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WishlistApi.wishlistGetWishlistById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {WishlistGetWishlistBySharedCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishlistGetWishlistBySharedCode(body: WishlistGetWishlistBySharedCodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistWishlistResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishlistGetWishlistBySharedCode(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WishlistApi.wishlistGetWishlistBySharedCode']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {WishlistListWishlistItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishlistListWishlistItems(body: WishlistListWishlistItemsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistListWishlistItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishlistListWishlistItems(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WishlistApi.wishlistListWishlistItems']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {WishlistListWishlistsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishlistListWishlists(body: WishlistListWishlistsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistListWishlistsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishlistListWishlists(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WishlistApi.wishlistListWishlists']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {WishlistMergeWishlistsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishlistMergeWishlists(body: WishlistMergeWishlistsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistWishlistResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishlistMergeWishlists(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WishlistApi.wishlistMergeWishlists']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {WishlistRemoveItemFromWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishlistRemoveItemFromWishlist(body: WishlistRemoveItemFromWishlistRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishlistRemoveItemFromWishlist(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WishlistApi.wishlistRemoveItemFromWishlist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {WishlistUpdateItemInWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishlistUpdateItemInWishlist(body: WishlistUpdateItemInWishlistRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistWishlistItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishlistUpdateItemInWishlist(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WishlistApi.wishlistUpdateItemInWishlist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {WishlistUpdateWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishlistUpdateWishlist(body: WishlistUpdateWishlistRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishlistWishlistResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishlistUpdateWishlist(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WishlistApi.wishlistUpdateWishlist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * WishlistApi - factory interface
 * @export
 */
export const WishlistApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WishlistApiFp(configuration)
    return {
        /**
         * 
         * @param {WishlistAddItemToWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistAddItemToWishlist(body: WishlistAddItemToWishlistRequest, options?: any): AxiosPromise<WishlistWishlistItemResponse> {
            return localVarFp.wishlistAddItemToWishlist(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WishlistAreItemsInWishlistsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistAreItemsInWishlists(body: WishlistAreItemsInWishlistsRequest, options?: any): AxiosPromise<WishlistAreItemsInWishlistsResponse> {
            return localVarFp.wishlistAreItemsInWishlists(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sharing endpoints
         * @param {WishlistBulkCreateSharingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistBulkCreateSharing(body: WishlistBulkCreateSharingRequest, options?: any): AxiosPromise<WishlistBulkCreateSharingResponse> {
            return localVarFp.wishlistBulkCreateSharing(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary BulkRemoveItemsFromWishlists removes items from wishlists.
         * @param {WishlistBulkRemoveItemsFromWishlistsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistBulkRemoveItemsFromWishlists(body: WishlistBulkRemoveItemsFromWishlistsRequest, options?: any): AxiosPromise<object> {
            return localVarFp.wishlistBulkRemoveItemsFromWishlists(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WishlistBulkRevokeSharingRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistBulkRevokeSharing(body: WishlistBulkRevokeSharingRequest, options?: any): AxiosPromise<object> {
            return localVarFp.wishlistBulkRevokeSharing(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WishlistCreateWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistCreateWishlist(body: WishlistCreateWishlistRequest, options?: any): AxiosPromise<WishlistWishlistResponse> {
            return localVarFp.wishlistCreateWishlist(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WishlistDeleteWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistDeleteWishlist(body: WishlistDeleteWishlistRequest, options?: any): AxiosPromise<object> {
            return localVarFp.wishlistDeleteWishlist(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WishlistGetItemFromWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistGetItemFromWishlist(body: WishlistGetItemFromWishlistRequest, options?: any): AxiosPromise<WishlistWishlistItemResponse> {
            return localVarFp.wishlistGetItemFromWishlist(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WishlistGetWishlistByIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistGetWishlistById(body: WishlistGetWishlistByIdRequest, options?: any): AxiosPromise<WishlistWishlistResponse> {
            return localVarFp.wishlistGetWishlistById(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WishlistGetWishlistBySharedCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistGetWishlistBySharedCode(body: WishlistGetWishlistBySharedCodeRequest, options?: any): AxiosPromise<WishlistWishlistResponse> {
            return localVarFp.wishlistGetWishlistBySharedCode(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WishlistListWishlistItemsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistListWishlistItems(body: WishlistListWishlistItemsRequest, options?: any): AxiosPromise<WishlistListWishlistItemsResponse> {
            return localVarFp.wishlistListWishlistItems(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WishlistListWishlistsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistListWishlists(body: WishlistListWishlistsRequest, options?: any): AxiosPromise<WishlistListWishlistsResponse> {
            return localVarFp.wishlistListWishlists(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WishlistMergeWishlistsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistMergeWishlists(body: WishlistMergeWishlistsRequest, options?: any): AxiosPromise<WishlistWishlistResponse> {
            return localVarFp.wishlistMergeWishlists(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WishlistRemoveItemFromWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistRemoveItemFromWishlist(body: WishlistRemoveItemFromWishlistRequest, options?: any): AxiosPromise<object> {
            return localVarFp.wishlistRemoveItemFromWishlist(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WishlistUpdateItemInWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistUpdateItemInWishlist(body: WishlistUpdateItemInWishlistRequest, options?: any): AxiosPromise<WishlistWishlistItemResponse> {
            return localVarFp.wishlistUpdateItemInWishlist(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WishlistUpdateWishlistRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishlistUpdateWishlist(body: WishlistUpdateWishlistRequest, options?: any): AxiosPromise<WishlistWishlistResponse> {
            return localVarFp.wishlistUpdateWishlist(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WishlistApi - object-oriented interface
 * @export
 * @class WishlistApi
 * @extends {BaseAPI}
 */
export class WishlistApi extends BaseAPI {
    /**
     * 
     * @param {WishlistAddItemToWishlistRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public wishlistAddItemToWishlist(body: WishlistAddItemToWishlistRequest, options?: RawAxiosRequestConfig) {
        return WishlistApiFp(this.configuration).wishlistAddItemToWishlist(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WishlistAreItemsInWishlistsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public wishlistAreItemsInWishlists(body: WishlistAreItemsInWishlistsRequest, options?: RawAxiosRequestConfig) {
        return WishlistApiFp(this.configuration).wishlistAreItemsInWishlists(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sharing endpoints
     * @param {WishlistBulkCreateSharingRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public wishlistBulkCreateSharing(body: WishlistBulkCreateSharingRequest, options?: RawAxiosRequestConfig) {
        return WishlistApiFp(this.configuration).wishlistBulkCreateSharing(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary BulkRemoveItemsFromWishlists removes items from wishlists.
     * @param {WishlistBulkRemoveItemsFromWishlistsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public wishlistBulkRemoveItemsFromWishlists(body: WishlistBulkRemoveItemsFromWishlistsRequest, options?: RawAxiosRequestConfig) {
        return WishlistApiFp(this.configuration).wishlistBulkRemoveItemsFromWishlists(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WishlistBulkRevokeSharingRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public wishlistBulkRevokeSharing(body: WishlistBulkRevokeSharingRequest, options?: RawAxiosRequestConfig) {
        return WishlistApiFp(this.configuration).wishlistBulkRevokeSharing(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WishlistCreateWishlistRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public wishlistCreateWishlist(body: WishlistCreateWishlistRequest, options?: RawAxiosRequestConfig) {
        return WishlistApiFp(this.configuration).wishlistCreateWishlist(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WishlistDeleteWishlistRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public wishlistDeleteWishlist(body: WishlistDeleteWishlistRequest, options?: RawAxiosRequestConfig) {
        return WishlistApiFp(this.configuration).wishlistDeleteWishlist(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WishlistGetItemFromWishlistRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public wishlistGetItemFromWishlist(body: WishlistGetItemFromWishlistRequest, options?: RawAxiosRequestConfig) {
        return WishlistApiFp(this.configuration).wishlistGetItemFromWishlist(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WishlistGetWishlistByIdRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public wishlistGetWishlistById(body: WishlistGetWishlistByIdRequest, options?: RawAxiosRequestConfig) {
        return WishlistApiFp(this.configuration).wishlistGetWishlistById(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WishlistGetWishlistBySharedCodeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public wishlistGetWishlistBySharedCode(body: WishlistGetWishlistBySharedCodeRequest, options?: RawAxiosRequestConfig) {
        return WishlistApiFp(this.configuration).wishlistGetWishlistBySharedCode(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WishlistListWishlistItemsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public wishlistListWishlistItems(body: WishlistListWishlistItemsRequest, options?: RawAxiosRequestConfig) {
        return WishlistApiFp(this.configuration).wishlistListWishlistItems(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WishlistListWishlistsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public wishlistListWishlists(body: WishlistListWishlistsRequest, options?: RawAxiosRequestConfig) {
        return WishlistApiFp(this.configuration).wishlistListWishlists(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WishlistMergeWishlistsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public wishlistMergeWishlists(body: WishlistMergeWishlistsRequest, options?: RawAxiosRequestConfig) {
        return WishlistApiFp(this.configuration).wishlistMergeWishlists(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WishlistRemoveItemFromWishlistRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public wishlistRemoveItemFromWishlist(body: WishlistRemoveItemFromWishlistRequest, options?: RawAxiosRequestConfig) {
        return WishlistApiFp(this.configuration).wishlistRemoveItemFromWishlist(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WishlistUpdateItemInWishlistRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public wishlistUpdateItemInWishlist(body: WishlistUpdateItemInWishlistRequest, options?: RawAxiosRequestConfig) {
        return WishlistApiFp(this.configuration).wishlistUpdateItemInWishlist(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WishlistUpdateWishlistRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public wishlistUpdateWishlist(body: WishlistUpdateWishlistRequest, options?: RawAxiosRequestConfig) {
        return WishlistApiFp(this.configuration).wishlistUpdateWishlist(body, options).then((request) => request(this.axios, this.basePath));
    }
}



