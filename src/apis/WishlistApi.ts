/* tslint:disable */
/* eslint-disable */
/**
 * Wishlist Service
 * API for managing wishlists
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcStatus,
  WishlistAddItemToWishlistRequest,
  WishlistAreItemsInWishlistsRequest,
  WishlistAreItemsInWishlistsResponse,
  WishlistBulkCreateSharingRequest,
  WishlistBulkCreateSharingResponse,
  WishlistBulkRemoveItemsFromWishlistsRequest,
  WishlistBulkRevokeSharingRequest,
  WishlistCreateWishlistRequest,
  WishlistDeleteWishlistRequest,
  WishlistGetItemFromWishlistRequest,
  WishlistGetWishlistByIdRequest,
  WishlistGetWishlistBySharedCodeRequest,
  WishlistListWishlistItemsRequest,
  WishlistListWishlistItemsResponse,
  WishlistListWishlistsRequest,
  WishlistListWishlistsResponse,
  WishlistMergeWishlistsRequest,
  WishlistRemoveItemFromWishlistRequest,
  WishlistUpdateItemInWishlistRequest,
  WishlistUpdateWishlistRequest,
  WishlistWishlistItemResponse,
  WishlistWishlistResponse,
} from '../models/index';
import {
    RpcStatusFromJSON,
    RpcStatusToJSON,
    WishlistAddItemToWishlistRequestFromJSON,
    WishlistAddItemToWishlistRequestToJSON,
    WishlistAreItemsInWishlistsRequestFromJSON,
    WishlistAreItemsInWishlistsRequestToJSON,
    WishlistAreItemsInWishlistsResponseFromJSON,
    WishlistAreItemsInWishlistsResponseToJSON,
    WishlistBulkCreateSharingRequestFromJSON,
    WishlistBulkCreateSharingRequestToJSON,
    WishlistBulkCreateSharingResponseFromJSON,
    WishlistBulkCreateSharingResponseToJSON,
    WishlistBulkRemoveItemsFromWishlistsRequestFromJSON,
    WishlistBulkRemoveItemsFromWishlistsRequestToJSON,
    WishlistBulkRevokeSharingRequestFromJSON,
    WishlistBulkRevokeSharingRequestToJSON,
    WishlistCreateWishlistRequestFromJSON,
    WishlistCreateWishlistRequestToJSON,
    WishlistDeleteWishlistRequestFromJSON,
    WishlistDeleteWishlistRequestToJSON,
    WishlistGetItemFromWishlistRequestFromJSON,
    WishlistGetItemFromWishlistRequestToJSON,
    WishlistGetWishlistByIdRequestFromJSON,
    WishlistGetWishlistByIdRequestToJSON,
    WishlistGetWishlistBySharedCodeRequestFromJSON,
    WishlistGetWishlistBySharedCodeRequestToJSON,
    WishlistListWishlistItemsRequestFromJSON,
    WishlistListWishlistItemsRequestToJSON,
    WishlistListWishlistItemsResponseFromJSON,
    WishlistListWishlistItemsResponseToJSON,
    WishlistListWishlistsRequestFromJSON,
    WishlistListWishlistsRequestToJSON,
    WishlistListWishlistsResponseFromJSON,
    WishlistListWishlistsResponseToJSON,
    WishlistMergeWishlistsRequestFromJSON,
    WishlistMergeWishlistsRequestToJSON,
    WishlistRemoveItemFromWishlistRequestFromJSON,
    WishlistRemoveItemFromWishlistRequestToJSON,
    WishlistUpdateItemInWishlistRequestFromJSON,
    WishlistUpdateItemInWishlistRequestToJSON,
    WishlistUpdateWishlistRequestFromJSON,
    WishlistUpdateWishlistRequestToJSON,
    WishlistWishlistItemResponseFromJSON,
    WishlistWishlistItemResponseToJSON,
    WishlistWishlistResponseFromJSON,
    WishlistWishlistResponseToJSON,
} from '../models/index';

export interface WishlistAddItemToWishlistOperationRequest {
    body: WishlistAddItemToWishlistRequest;
}

export interface WishlistAreItemsInWishlistsOperationRequest {
    body: WishlistAreItemsInWishlistsRequest;
}

export interface WishlistBulkCreateSharingOperationRequest {
    body: WishlistBulkCreateSharingRequest;
}

export interface WishlistBulkRemoveItemsFromWishlistsOperationRequest {
    body: WishlistBulkRemoveItemsFromWishlistsRequest;
}

export interface WishlistBulkRevokeSharingOperationRequest {
    body: WishlistBulkRevokeSharingRequest;
}

export interface WishlistCreateWishlistOperationRequest {
    body: WishlistCreateWishlistRequest;
}

export interface WishlistDeleteWishlistOperationRequest {
    body: WishlistDeleteWishlistRequest;
}

export interface WishlistGetItemFromWishlistOperationRequest {
    body: WishlistGetItemFromWishlistRequest;
}

export interface WishlistGetWishlistByIdOperationRequest {
    body: WishlistGetWishlistByIdRequest;
}

export interface WishlistGetWishlistBySharedCodeOperationRequest {
    body: WishlistGetWishlistBySharedCodeRequest;
}

export interface WishlistListWishlistItemsOperationRequest {
    body: WishlistListWishlistItemsRequest;
}

export interface WishlistListWishlistsOperationRequest {
    body: WishlistListWishlistsRequest;
}

export interface WishlistMergeWishlistsOperationRequest {
    body: WishlistMergeWishlistsRequest;
}

export interface WishlistRemoveItemFromWishlistOperationRequest {
    body: WishlistRemoveItemFromWishlistRequest;
}

export interface WishlistUpdateItemInWishlistOperationRequest {
    body: WishlistUpdateItemInWishlistRequest;
}

export interface WishlistUpdateWishlistOperationRequest {
    body: WishlistUpdateWishlistRequest;
}

/**
 * 
 */
export class WishlistApi extends runtime.BaseAPI {

    /**
     */
    async wishlistAddItemToWishlistRaw(requestParameters: WishlistAddItemToWishlistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistWishlistItemResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling wishlistAddItemToWishlist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/wishlist.Wishlist/AddItemToWishlist`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WishlistAddItemToWishlistRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WishlistWishlistItemResponseFromJSON(jsonValue));
    }

    /**
     */
    async wishlistAddItemToWishlist(requestParameters: WishlistAddItemToWishlistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistWishlistItemResponse> {
        const response = await this.wishlistAddItemToWishlistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async wishlistAreItemsInWishlistsRaw(requestParameters: WishlistAreItemsInWishlistsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistAreItemsInWishlistsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling wishlistAreItemsInWishlists.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/wishlist.Wishlist/AreItemsInWishlists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WishlistAreItemsInWishlistsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WishlistAreItemsInWishlistsResponseFromJSON(jsonValue));
    }

    /**
     */
    async wishlistAreItemsInWishlists(requestParameters: WishlistAreItemsInWishlistsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistAreItemsInWishlistsResponse> {
        const response = await this.wishlistAreItemsInWishlistsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sharing endpoints
     */
    async wishlistBulkCreateSharingRaw(requestParameters: WishlistBulkCreateSharingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistBulkCreateSharingResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling wishlistBulkCreateSharing.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/wishlist.Wishlist/BulkCreateSharing`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WishlistBulkCreateSharingRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WishlistBulkCreateSharingResponseFromJSON(jsonValue));
    }

    /**
     * Sharing endpoints
     */
    async wishlistBulkCreateSharing(requestParameters: WishlistBulkCreateSharingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistBulkCreateSharingResponse> {
        const response = await this.wishlistBulkCreateSharingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * BulkRemoveItemsFromWishlists removes items from wishlists.
     */
    async wishlistBulkRemoveItemsFromWishlistsRaw(requestParameters: WishlistBulkRemoveItemsFromWishlistsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling wishlistBulkRemoveItemsFromWishlists.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/wishlist.Wishlist/BulkRemoveItemsFromWishlists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WishlistBulkRemoveItemsFromWishlistsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * BulkRemoveItemsFromWishlists removes items from wishlists.
     */
    async wishlistBulkRemoveItemsFromWishlists(requestParameters: WishlistBulkRemoveItemsFromWishlistsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.wishlistBulkRemoveItemsFromWishlistsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async wishlistBulkRevokeSharingRaw(requestParameters: WishlistBulkRevokeSharingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling wishlistBulkRevokeSharing.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/wishlist.Wishlist/BulkRevokeSharing`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WishlistBulkRevokeSharingRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async wishlistBulkRevokeSharing(requestParameters: WishlistBulkRevokeSharingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.wishlistBulkRevokeSharingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async wishlistCreateWishlistRaw(requestParameters: WishlistCreateWishlistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistWishlistResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling wishlistCreateWishlist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/wishlist.Wishlist/CreateWishlist`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WishlistCreateWishlistRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WishlistWishlistResponseFromJSON(jsonValue));
    }

    /**
     */
    async wishlistCreateWishlist(requestParameters: WishlistCreateWishlistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistWishlistResponse> {
        const response = await this.wishlistCreateWishlistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async wishlistDeleteWishlistRaw(requestParameters: WishlistDeleteWishlistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling wishlistDeleteWishlist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/wishlist.Wishlist/DeleteWishlist`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WishlistDeleteWishlistRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async wishlistDeleteWishlist(requestParameters: WishlistDeleteWishlistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.wishlistDeleteWishlistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async wishlistGetItemFromWishlistRaw(requestParameters: WishlistGetItemFromWishlistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistWishlistItemResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling wishlistGetItemFromWishlist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/wishlist.Wishlist/GetItemFromWishlist`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WishlistGetItemFromWishlistRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WishlistWishlistItemResponseFromJSON(jsonValue));
    }

    /**
     */
    async wishlistGetItemFromWishlist(requestParameters: WishlistGetItemFromWishlistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistWishlistItemResponse> {
        const response = await this.wishlistGetItemFromWishlistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async wishlistGetWishlistByIdRaw(requestParameters: WishlistGetWishlistByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistWishlistResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling wishlistGetWishlistById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/wishlist.Wishlist/GetWishlistById`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WishlistGetWishlistByIdRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WishlistWishlistResponseFromJSON(jsonValue));
    }

    /**
     */
    async wishlistGetWishlistById(requestParameters: WishlistGetWishlistByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistWishlistResponse> {
        const response = await this.wishlistGetWishlistByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async wishlistGetWishlistBySharedCodeRaw(requestParameters: WishlistGetWishlistBySharedCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistWishlistResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling wishlistGetWishlistBySharedCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/wishlist.Wishlist/GetWishlistBySharedCode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WishlistGetWishlistBySharedCodeRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WishlistWishlistResponseFromJSON(jsonValue));
    }

    /**
     */
    async wishlistGetWishlistBySharedCode(requestParameters: WishlistGetWishlistBySharedCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistWishlistResponse> {
        const response = await this.wishlistGetWishlistBySharedCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async wishlistListWishlistItemsRaw(requestParameters: WishlistListWishlistItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistListWishlistItemsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling wishlistListWishlistItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/wishlist.Wishlist/ListWishlistItems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WishlistListWishlistItemsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WishlistListWishlistItemsResponseFromJSON(jsonValue));
    }

    /**
     */
    async wishlistListWishlistItems(requestParameters: WishlistListWishlistItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistListWishlistItemsResponse> {
        const response = await this.wishlistListWishlistItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async wishlistListWishlistsRaw(requestParameters: WishlistListWishlistsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistListWishlistsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling wishlistListWishlists.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/wishlist.Wishlist/ListWishlists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WishlistListWishlistsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WishlistListWishlistsResponseFromJSON(jsonValue));
    }

    /**
     */
    async wishlistListWishlists(requestParameters: WishlistListWishlistsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistListWishlistsResponse> {
        const response = await this.wishlistListWishlistsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async wishlistMergeWishlistsRaw(requestParameters: WishlistMergeWishlistsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistWishlistResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling wishlistMergeWishlists.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/wishlist.Wishlist/MergeWishlists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WishlistMergeWishlistsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WishlistWishlistResponseFromJSON(jsonValue));
    }

    /**
     */
    async wishlistMergeWishlists(requestParameters: WishlistMergeWishlistsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistWishlistResponse> {
        const response = await this.wishlistMergeWishlistsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async wishlistRemoveItemFromWishlistRaw(requestParameters: WishlistRemoveItemFromWishlistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling wishlistRemoveItemFromWishlist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/wishlist.Wishlist/RemoveItemFromWishlist`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WishlistRemoveItemFromWishlistRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async wishlistRemoveItemFromWishlist(requestParameters: WishlistRemoveItemFromWishlistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.wishlistRemoveItemFromWishlistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async wishlistUpdateItemInWishlistRaw(requestParameters: WishlistUpdateItemInWishlistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistWishlistItemResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling wishlistUpdateItemInWishlist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/wishlist.Wishlist/UpdateItemInWishlist`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WishlistUpdateItemInWishlistRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WishlistWishlistItemResponseFromJSON(jsonValue));
    }

    /**
     */
    async wishlistUpdateItemInWishlist(requestParameters: WishlistUpdateItemInWishlistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistWishlistItemResponse> {
        const response = await this.wishlistUpdateItemInWishlistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async wishlistUpdateWishlistRaw(requestParameters: WishlistUpdateWishlistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistWishlistResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling wishlistUpdateWishlist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/wishlist.Wishlist/UpdateWishlist`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WishlistUpdateWishlistRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WishlistWishlistResponseFromJSON(jsonValue));
    }

    /**
     */
    async wishlistUpdateWishlist(requestParameters: WishlistUpdateWishlistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistWishlistResponse> {
        const response = await this.wishlistUpdateWishlistRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
